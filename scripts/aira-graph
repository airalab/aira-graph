#!/usr/bin/env python3

from eth_account.messages import defunct_hash_message
from optparse import OptionParser
from time import sleep, time
from ipfsapi import connect 
from web3.auto import w3
from json import dumps
import sys

if __name__ == '__main__':
    parser = OptionParser(usage="%prog [-k] [-w] [GRAPH] [LIGHTHOUSE]", version="%prog 0.2")
    parser.add_option("-a", "--ipfs-api-host",
                      help="IPFS node API host [default: %default]", dest="host", default="localhost")
    parser.add_option("-p", "--ipfs-api-port",
                      help="IPFS node API port [default: %default]", dest="port", default=5001)
    parser.add_option("-k", "--ethereum-key",
                      help="Ethereum signing key", dest="key", default="")
    parser.add_option("-w", "--ethereum-key-password",
                      help="Ethereum signing key password file", dest="password", default="")

    (options, args) = parser.parse_args()
    if len(args) != 2:
        parser.error("incorrect number of arguments")

    private_key = {}
    with open(options.key) as keyfile:
        encrypted_key = keyfile.read()
        with open(options.password) as passfile:
            key_password = passfile.readline()[:-1]
            private_key = w3.eth.account.decrypt(encrypted_key, key_password)

    def sign(json):
        msg = dumps(json)
        message_hash = defunct_hash_message(text=msg)
        signature = w3.eth.account.signHash(message_hash, private_key=private_key)['signature']
        return "{}\n---\n{}".format(msg, w3.toHex(signature))

    c = connect(options.host, options.port)
    graph_topic = args[0]
    lighthouse_topic = args[1]
    stat = { 'id': c.id()['ID'], 'addresses': c.id()['Addresses'], 'lighthouse': lighthouse_topic }
    with c.pubsub_sub(lighthouse_topic, discover=True) as sub:
        with c.pubsub_sub(graph_topic, discover=True) as graph_sub:
            while True:
                stat['peers'] = c.pubsub_peers(lighthouse_topic)['Strings']
                stat['timestamp'] = int(time())
                stat_hash = '/ipfs/{}'.format(c.add_str(sign(stat)))
                name = c.name_publish(stat_hash)['Name']
                print('Published to /ipns/{}'.format(name))
                c.pubsub_pub(graph_topic, '{}\r\n'.format(name))
                sleep(5)
